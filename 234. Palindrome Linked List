package net.codejava;

/*public class ListNode {
	int val;
	ListNode next;

	ListNode() {
	}

	ListNode(int val) {
		this.val = val;
	}

	ListNode(int val, ListNode next) {
		this.val = val;
		this.next = next;
	}
}*/

public class Solution {

	public static void main(String[] args) {
		ListNode list = new ListNode(1);
		list.next = new ListNode(2);
		list.next.next = new ListNode(3);
		list.next.next.next = new ListNode(3);
		list.next.next.next.next = new ListNode(2);
		list.next.next.next.next.next = new ListNode(1);

		printList(list);

		// ListNode mid = findmid(list);
		boolean val = isPalindrome(list);

		// printList(mid);
	}

	public static boolean isPalindrome(ListNode head) {

		if (head.next == null)
			return true;

		ListNode mid = findmid(head);
		ListNode sechead = reverseList(mid);

		while (sechead != null) {
			if (sechead.val != head.val)
				return false;

			sechead = sechead.next;
			head = head.next;
		}

		return true;

	}

	static void printList(ListNode node) {
		while (node != null) {
			System.out.print(node.val + "->");
			node = node.next;
		}
		System.out.print("NULL\n");
	}

	public static ListNode findmid(ListNode l1) {
		ListNode fast = l1;
		ListNode slow = l1;

		while (fast.next != null && fast.next.next != null) {
			fast = fast.next.next;
			slow = slow.next;
		}
		return slow.next;

	}

	public static ListNode reverseList(ListNode l1) {

		ListNode prev = null;
		ListNode cur = l1;
		ListNode next = null;
		while (cur != null) {
			next = cur.next;
			cur.next = prev;
			prev = cur;
			cur = next;
		}
		l1 = prev;
		return l1;

	}
}
